@font-face {
    font-family: 'Batch';
    src: url(font-path('batch-icons-webfont.eot') + "?#iefix") format('embedded-opentype'),
         url(font-path('batch-icons-webfont.woff')) format('woff'), 
         url(font-path('batch-icons-webfont.ttf'))  format('truetype'),
         url(font-path('batch-icons-webfont.svg') + "#Batch") format('svg');
}

body {
	// background-color: #f6f6f6;
	// background-image: url(/assets/BG_tile_linen_gray.gif);
	// background-color: #f4f5f7;
	// background-color: #F5F7FA;
	// background-color: rgba(245, 247, 250, 0.8);
	// background-color: rgba(32, 121, 155, 0.1);
	transition: all .2s ease;
}
//Header styles

// Header title
header#header {
	// border-top: 8px solid #464e54;
	background: #DAEFF8;
	// background: white;
	margin: 0 auto;
	text-align: center;
	overflow: auto;
	// box-shadow: 0px 1px 4px -2px rgba(0,0,0,.2);
	// border-bottom: 1px solid #d8dde1;
	a.logo {
		margin: 25px 0; 
		color: $body-font-color;
		display: inline-block;
	}
	.header-logo {
		display: inline-block;
		background-image: url(/assets/logo.png);
		height: 50px;
		width: 50px;
		vertical-align: top;
		margin-top: 0px;
		margin-right: 3px;
		background-size: contain;
	}
	.header-title {
		display: inline-block;
		color: #444444;
		// span { color: white }
		font-family: "omnes-pro",sans-serif;
		font-style: italic;
		font-weight: 700;
		font-size: rem-calc(40px);
		line-height: 50px;
	}
}

// Main Nav bar
nav.main-nav {
	margin: 0 auto;
	padding: 5px;
	background: white;
	
	// background: #464e54;
	ul {
		max-width: 550px;
		width: 100%;
		display: block; 
		margin: 0 auto;
		overflow: hidden;
	}

	li {
		list-style: none;
		float: left;
		margin: 0; 
		line-height: 1.5em;
		text-align: center;
		 a {
			color: #444444;
		 	// font-size: emCalc(16px);
		 	// font-family: "omnes-pro", "Helvetica Neue", "Helvetica", Helvetica, Arial, sans-serif;
		 	font-weight: 500;
		 	// text-transform: Capitalize;
		 	padding: 4px 7px;
		 	transition: all .2s ease;
		 	&:hover {
		 		color: $grapefruit;
		 		transition: all .2s ease;
		 	}
		 	&.active {
		 		// color: $grapefruit;
		 		// font-weight: 600;
		 	}
		 }

		 width: 33%;
		 padding: 0;
		 &.nav-4 { display: none; }
		 &.nav-5 { display: none; }
	 }
}



#support-bar {
	// max-width: $main-width;
	// height: 40px;
	// background-color: #f6f6f6;
	background-color: white;
	// background-color: rgba(147, 208, 109, 0.64);
	margin: 0 auto;
}

#body-section {
	margin: 0 auto;
	position: relative;
}
// Main Content
#main-content {
	margin: 17px auto;
	min-height: 500px;
}

.section-header {
	margin-bottom: 0.4em;
}



footer#footer {
	
	
}


// Global Styles

.main-width {
	max-width: 93%;
	margin: 0 auto;
}

.padded-wrap {
	padding: 10px 4%;
}

.clrfix:after {
	content: ".";
	display: block;
	height: 0;
	width: 0;
	line-height: 0;
	font-size: 0;
	clear: both;
	visibility: hidden;
}

.inline-unit { 
	vertical-align: top;
	display: inline-block;
	*display: inline;
	zoom: 1;
}



.stretch {
    width: 100%;
    display: inline-block;
    font-size: 0;
    line-height: 0
}

.ib-container:after {
    content: '';
    width: 100%;
    display: inline-block;
    font-size: 0;
    line-height: 0
}

.icon-font {
	font-family: Batch;
	&.favorite.not_voted:before {
		content: "\f04b";
	}
	&.favorite.voted:before {
		content: "\f049";
	}
	&.bite.not_voted:before {
		content: url(/assets/bite.png)
	}
	&.bite.voted:before {
		content: url(/assets/bit.png)
	}
}

.share-icons {
	margin: 0 25px;
	text-align: justify;
	height: 40px;

	img { width: 35px; height: 35px; }
	.image-wrap { display: block; 
		width: 35px;
		height: 35px;

		margin: 0 auto; position: relative }
	.image-wrap:hover .overlay {
		width:100%;
		height:100%;
		position: absolute;
		background-color:#ffffff;
		opacity:0.1;
		-webkit-border-radius: 30px;
		-moz-border-radius: 30px;
		border-radius: 30px;
	}
}

.module {
	margin-bottom: 1em;
	h3 {
		padding-bottom: 0.1em;
		border-bottom: 2px solid #dddddd;
		margin-bottom: 0.3em;
	}
}

.round-box {
	background: #fff;
	// border-radius: 6px;
	// box-shadow: 0 1px 2px rgba(0,0,0,0.07);
	// border: 1px solid #eee;
}


// To disable iPhone form zoom
select, textarea, input[type="text"], input[type="password"], input[type="datetime"], input[type="datetime-local"], input[type="date"], input[type="month"], input[type="time"], input[type="week"], input[type="number"], input[type="email"], input[type="url"], input[type="search"], input[type="tel"], input[type="color"] {
	font-size: 1em;
}

 /* Styles for screens that are bigger than $medium-screen (500px)
 -------------------------------------------------------------*/
@media only screen and (min-width: $medium-screen) {
	
	header#header {
		.header-title {
			// font-size: emCalc(40px);
		}
	}



}

 /* Styles for screens that are bigger than $main-screen (768px)
 -------------------------------------------------------------*/
@media only screen and (min-width: $main-screen) {

 	$sidebar-width: 250px;

 	#main-content {
 		display: table;
 		width: 100%;
 		.table-col {
 			display: table-cell;
 			vertical-align:top;
 		}
 		.content {
 			
 		}
 		.sidebar {
 			padding-left: 1em;
 			width: 250px;
 		}
 	}

 	nav.main-nav {
 		ul li {
 			width: 20%;
 			&.nav-4 { display: block; }
 			&.nav-5 { display: block; }
 		}
 	}

 	header#header {
 		padding-top: 10px;
 	}

 	.main-width {
 		width: $main-width;
 	}

} // end media query

@media #{$xlarge-up} {
	.recipes-grid-width {
		width: 900px;
	}

	.grid-recipe {
		height: 380px;
	}
}

/* Below Variables added to make this work in Codepen, individually, without including Foundation
* http://codepen.io/rvinay88/pen/Gbvua
*/
@import "compass";
@mixin clearfix {
  clear: both;
}
$default-float: left;
$include-html-classes: true;
/*End Variable Declaration*/
 
//
// Block Grid Variables
//
$include-html-grid-classes: $include-html-classes !default;
 
// We use this to control the maximum number of block grid elements per row
$block-grid-elements: 12 !default;
$block-grid-default-spacing: 10px !default;
 
// Enables media queries for block-grid classes. Set to false if writing semantic HTML.
$block-grid-media-queries: true !default;
 
//
// Block Grid Mixins
//
 
// We use this mixin to create different block-grids. You can apply per-row and spacing options.
// Setting $base-style to false will ommit default styles.
@mixin block-grid($per-row:false, $spacing:$block-grid-default-spacing, $base-style:true) {
 
  @if $base-style {
    display: block;
    padding: 0;
    // margin: 0 ($spacing/2);
    @include clearfix;
 
    &>li {
      display: inline;
      height: auto;
      float: $default-float;
      padding: 0 ($spacing/2) $spacing;
    }
  }
 
  @if $per-row {
    &>li {
      width: 100%/$per-row;
      padding: 0 ($spacing/2) $spacing;
 
      &:nth-of-type(n) { clear: none; }
      &:nth-of-type(#{$per-row}n+1) { clear: both; }
    }
  }
 
 
}
 
@if $include-html-grid-classes {
  /* Foundation Block Grids for below small breakpoint */
  
  /* Add your media query names and breakpoints here */
 
  $breakingpoint-names:  xs, small, medium, large, xl;
  $breakingpoint-widths: 300px, 300px, 530px, 700px, 1120px;
 
  $bp-prev: false;
  $query: ();
  
  @for $bp-name from 1 through length($breakingpoint-names) {
   
     $name:  nth($breakingpoint-names, $bp-name); 
     $width: nth($breakingpoint-widths, $bp-name); 
     $query: " screen and (min-width: #{$width})";
     
     /* Mobile First Styles */
    
     @if ($bp-name == 1) {
      @media only screen {
        [class*="block-grid-"] { @include block-grid; }
      
        @for $i from 1 through $block-grid-elements {
          .#{$name}-block-grid-#{($i)} {
            @include block-grid($i,$block-grid-default-spacing,false);
          }
        }
      }
    }
 
  /* Extending styles for >mobile breakpoint */
 
    @else {
      @media #{$query}
      {
        @for $i from 1 through $block-grid-elements {
          $a: nth($breakingpoint-names, $bp-name);
          .#{$a}-block-grid-#{$i} {
            @include block-grid($i,$block-grid-default-spacing,false);
          }
        }
        @each $bpn in $breakingpoint-names {
          @if $bpn != $name {
            @for $j from 1 through $block-grid-elements {
              .#{$bpn}-block-grid-#{$j} > li:nth-of-type(#{$j}n+1) { clear: none; }
            }
          }
        }
      }
    }
  }
}
